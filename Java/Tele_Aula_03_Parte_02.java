/*
TELE AULA 03 - PARTE 02
## TRATAMENTO DE ERROS
# TRY-CATCH
    -> EXCEPTION (TRY / CATCH)
        -> try {...}:
            * NESTE BLOCO SÃO ESCRITAS TODAS AS LINHAS DE CÓDIGO QUE PODEM VIR A LANÇAR UMA EXCEÇÃO.
        -> catch (tipo_excecao e) {...}:
            * NESTE BLOCO É DESCRITA A AÇÃO QUE OCORRERÁ QUANDO A EXCEÇÃO FOR CAPTURADA.
        -> finally:
            * É OPCIONAL E FORNECE UM CONJUNTO DE CÓDIGOS QUE É SEMPRE EXECUTADO, INDEPENDENTEMENTE DA OCORRÊNCIA DA EXCEÇÃO.
            * O USO DO FINALLY PODE SER EXEMPLIFICADO POR MEIO DE OPERAÇÕES DE BANCO DE DADOS.
            * ALGUMAS AÇÕES DE ENCERRAMENTO DE TRANSAÇÃO, TAIS COMO O FECHAMENTO DE ARQUIVOS OU DA CONEXÃO, SERÃO SEMPRE EXECUTADAS, MESMO SE UMA EXCEÇÃO É LANÇADA.

# DEFINIÇÃO THROW
    -> A INSTRUÇÃO THROW (QUE NÃO DEVE SER CONFUNDIDA COM A CLÁUSULA THROWS) SERVE PARA FORÇAR A OCORRÊNCIA DE UMA DETERMINADA EXCEÇÃO.
    -> EXCEÇÕES SÃO OBJETOS E TODOS OS SEUS TIPOS DEVEM ESTENDER À CLASSE THROWABLE OU A UMA DE SUAS SUBCLASSES. A CLASSE THROWABLE POSSUI UMA CADEIA DE CARACTERES QUE PODE SERVIR COMO DESCRITOR DA EXCEÇÃO E RECUPERADA COM O MÉTODO GETMESSAGE.
    -> O MÉTODO PRINTSTACKTRACE, TAMBÉM DESTA CLASSE, RETORNA O TIPO DE EXCEÇÃO GERADO E INFORMA EM QUE LINHA DA CLASSE OCORREU O ERRO.

# DEFINIÇÃO DE ASSERÇÕES EM POO
    * "UMA ASSERÇÃO É USADA PARA VERIFICAR UMA INVARIANTE, OU SEJA, UMA CONDIÇÃO QUE DEVE SER SEMPRE VERDADEIRA. SE A ASSERÇÃO É VERIFICADA COMO FALSA, ENTÃO UMA EXCEÇÃO É LANÇADA."
    * ASSERÇÕES SÃO NORMALMENTE USADAS PARA ASSEGURAR QUE COISAS QUE NÃO PODEM ACONTECER SEJAM NOTIFICADAS QUANDO ACONTECEREM. A FALHA DE UMA UMA OPERAÇÃO (UMA ENTRADA, POR EXEMPLO) É ANORMAL.
    
                                                cmd: assert (sem msg)                                                                   cmd: assert (com mensagem)
    Sintaxe                                     assert (ExprLógica);                                                                    assert (ExprLógica) : ”MsgDeAviso”;
    Exemplo de Exceção Lançada                  Exception in thread "main" java.lang.AssertionError                                     Exception in thread "main" java.lang.AssertionError: MsgDeAviso    


# CLASSE ABERTA
    -> O PRINCIPAL MOTIVO PELO QUAL SE MODELA UMA CLASSE É A CRIAÇÃO DE OBJETOS POR MEIO DE SUA INSTANCIAÇÃO.
    -> PODEMOS CRIAR CLASSES A PARTIR DAS QUAIS NÃO SE PODE GERAR INSTÂNCIAS.
    -> A CLASSE ABSTRATA É UMA CLASSE QUE NÃO PERMITE A GERAÇÃO DE INSTÂNCIAS A PARTIR DELA, ISTO É, NÃO PERMITE QUE SEJAM CRIADOS OBJETOS; AO CONTRÁRIO, UMA CLASSE CONCRETA PERMITE A GERAÇÃO DE INSTÂNCIAS.
    -> O USO DE CLASSE ABSTRATA AUXILIA QUANDO ATRIBUTOS (PREFERENCIALMENTE VÁRIOS) PODEM SER DEFINIDOS PARA OUTROS OBJETOS DE UM DADO TIPO.
    -> HÁ, CONTUDO, A POSSIBILIDADE DE QUE SEJAM CRIADOS TAMBÉM MÉTODOS ABSTRATOS, QUE COMPARTILHAM COMPORTAMENTOS COMO OUTROS OBJETOS.
    -> ASSIM, CADA MÉTODO NÃO IMPLEMENTADO NA CLASSE ABSTRATA TAMBÉM É INDICADO COMO ABSTRACT, EMBORA ESSE EXPEDIENTE POSSA SER EFETIVADO POR MEIO DAS INTERFACES.
    -> A POSSIBILIDADE DE DEFINIRMOS UM COMPORTAMENTO PADRÃO - MAS COM CERTO GRAU DE ESPECIFICIDADE - PARA UM GRUPO DE OUTRAS CLASSES.
    -> ELAS SERVEM COMO BASE PARA CRIAÇÃO DE OUTRAS CLASSES QUE CONTERÃO DADOS E COMPORTAMENTOS COMUNS.
    
    * DEFINIÇÃO DE HERANÇA MÚLTIPLA
    -> NOS FUNDAMENTOS DE HERANÇA, O MECANISMO DE HERANÇA FUNCIONA EM APENAS UM SENTIDO: DA CLASSE PAI PARA A CLASSE FILHA.
    -> EXEMPLO: CLASSE PACIENTE TEM ACESSO AOS CAMPOS DA CLASSE PESSOA, MAS A CLASSE PESSOA NÃO TEM ACESSO AOS CAMPOS E MÉTODOS ÚNICOS DE PACIENTE, COMO CONSULTAPLANO().

## DEFINIÇÃO E USO DE INTERFACES
# INTRODUÇÃO A INTERFACES PARA POO
    -> UMA INTERFACE É COMO UMA CLASSE, MAS CONTÉM APENAS DECLARAÇÕES VAZIAS DE SEUS MÉTODOS.
    -> O PROJETISTA DE UMA INTERFACE DECLARA OS MÉTODOS QUE DEVEM SER OFERECIDOS PELAS CLASSES QUE IMPLEMENTAM A INTERFACE E DECLARA O QUE ESSES MÉTODOS DEVEM FAZER.
    -> UMA INTERFACE PERMITE ESTABELECER UM "CONTRATO" ENTRE AS CLASSES; FUNCIONA DE MANEIRA BASTANTE SIMILAR AS CLASSES ABSTRATAS, PORÉM NÃO PERMITE IMPLEMENTAÇÃO DE NENHUM MÉTODO, CONTENDO APENAS A ESPECIFICAÇÃO DESTE.

# DECLARAÇÃO DE INTERFACES PARA POO
    -> HÁ A PALAVRA RESERVADA INTERFACE ONDE ESTAMOS ACOSTUMADOS A ENCONTRAR CLASS.
    -> NO ENTANTO, TANTO A GRAVAÇÃO DO ARQUIVO QUE CONTÉM O CÓDIGO-FONTE COMO A COMPILAÇÃO ACONTECEM COMO SE ESTIVÉSSEMOS LIDANDO COM UMA CLASSE.
    -> A SUPERCLASSE DIRETA É AQUELA A PARTIR DA QUAL A SUBCLASSE HERDA EXPLICITAMENTE. OU SEJA, A SUPERCLASSE DIRETA EFETIVA O MECANISMO DA HERANÇA DO JEITO QUE O DESENVOLVEMOS ATÉ O MOMENTO.
    -> A SUPERCLASSE INDIRETA É QUALQUER SUPERCLASSE ACIMA DA CLASSE DIRETA NA HIERARQUIA DE CLASSES.
    -> NO JAVA, A HIERARQUIA DE CLASSE SE INICIA COM A CLASSE OBJECT. É ESTA CLASSE OBJECT QUE TODA CLASSE EM HJAVA, DIRETA OU INDIRETAMENTE, ESTENDE OU "HERDA DE"    .
    -> OUTRA INFORMAÇÃO IMPORTANTE NESTE CONTEXTO É A CRIAÇÃO DE UMA INTERFACE NUM IDE (INTEGRATED DEVELOPMENT ENVIRONMENT).
    -> UMA INTERFACE PODE DECLARAR CONSTANTES (CAMPOS), MÉTODOS E, POR FIM, CLASSES E INTERFACES ANINHADAS. COMO TODOS OS MEMBROS DE UMA INTERFACE SÃO PÚBLICOS POR PADRÃO, O MODIFICADOR DE ACESSO PUBLIC É OMITIDO.

# EXTENSÃO DE INTERFACES PARA POO
    -> AS INTERFACES PODEM SER ESTENDIDAS POR MEIO DO USO DA PALAVRA RESERVADA EXTENDS.
    -> A EXTENSÃO DE VÁRIAS ENTIDADES SÓ É POSSÍVEL NO CASO DE INTERFACES.
    -> O MECANISMO PRIMÁRIO DE HERANÇA SÓ PERMITE QUE SE ESTENDA UMA ÚNICA CLASSE.
    -> AS INTERFACES QUE SÃO ESTENDIDAS SÃO CHAMADAS SUPERINTERFACES DA NOVA INTERFACE.
    -> A NOVA INTERFACE TORNA-SE UMA SUBINTERFACE DE SUAS SUPERINTERFACES.
    
# IMPLEMENTAÇÃO DE INTERFACES PARA POO
    -> A UTILIZAÇÃO DE UMA INTERFACE SERÁ DEMONSTRADA POR DIAGRAMA DA UML PARA O RELACIONAMENTO DA INTERFACE DAO COM AS CLASSES CLIENTE, FORNECEDOR E PRODUTO.
    -> UMA CLASSE PODE IMPLEMENTAR UMA OU MAIS INTERFACES ATRAVÉS DO USO DO IMPLEMENTS.
    -> ESSA VINCULAÇÃO ASSEMELHA-SE A UM CONTRATO.
*/