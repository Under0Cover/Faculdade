/* TELE AULA 02
# CONTEXTUALIZANDO:
-> UMA LINGUAGEM ORIENTADA A OBJETOS (OO) UTILIZA DIVERSAS ABSTRAÇÕES PARA REPRESENTAR MODELOS DO MUNDO REAL OU IMAGINÁRIO.
-> IDE É UM AMBIENTE QUE AUXILIA MUITO A VIDA DO PROGRAMADOR E UM BOM AMBIENTE DE DESENVOLVIMENTO COLABORA COM DIVERSOS RECURSOS.
-> ANÁLISE ESTRUTURADA:
    -> CONSTRUÇÃO DE MODELOS (RETRATA O FLUXO E O CONTEÚDO DAS INFORMAÇÕES UTILIZADAS PELO SISTEMA).
-> ANÁLISE ORIENTADA A OBJETOS:
    -> MODELO DE ANÁLISE, PROJETO E PROGRAMAÇÃO BASEADA NA COMPOSIÇÃO E INTERAÇÃO ENTRE AS UNIDADES DO SOFTWARE CHAMADA DE OBJETOS.
# DEFINIÇÃO E UTILIZAÇÃO DE MÉTODOS CONSTRUTORES:
-> A CRIAÇÃO DE INSTÂNCIAS REQUER A UTILIZAÇÃO DA PALAVRA CHAVE NEW
-> ALÉM DE CRIAR A INSTÂNCIA, ELA A ASSOCIARÁ A UMA REFERÊNCIA PARA QUE OS MÉTODOS DA CLASSE INSTANCIADA POSSAM SER EXECUTADOS.
-> EXEMPLO:
    -> Data novaData = New Data();
-> CONSTRUTORES SÃO MÉTODOS ESPECIAIS QUE SÃO CHAMADOS AUTOMATICAMENTE QUANDO INSTÂNCIAS SÃO CRIADAS POR MEIO DA PALAVRA CHAVE NEW.
-> ELES GARANTEM QUE O CÓDIGO CONTIDO NELES SERÁ EXECUTADO ANTES DE QUALQUER OUTRO CÓDIGO EM OUTROS MÉTODOS, JÁ QUE UMA INSTÂNCIA DE UMA CLASSE
SÓ PODE SER USADA DEPOIS DE TER SIDO CRIADA COM NEW, O OQUE CAUSA A EXECUÇÃO AUTOMÁTICA DO CONSTRUTOR.
                                ## IMPORTANTE ##
-> CONSTRUTORES DEVEM TER EXATAMENTE O MESMO NOME DA CLASSE A QUE PERTENCEM, INCLUSIVE CONSIDERANDO MAIÚSCULAS E MINÚSCULAS.
-> CONSTRUTORES NÃO PODEM RETORNAR VALOR ALGUM, NEM MESMO VOID. POR ISSO, DEVEM SER DECLARADOS SEM TIPO DE RETORNO.
-> CONSTRUTORES NÃO DEVEM RECEBER MODIFICADORES {EXEMPLO: PUBLIC OU PRIVATE}. ELES SERÃO PÚBLICOS SE A CLASSE FOR PÚBLICA.
-> A SOBRECARGA CONSISTE EM PERMITIR, DENTRO DA MESMA CLASSE, MAIS DE UM MÉTODO COM O MESMO NOME. MAS ELES NECESSARIAMENTE DEVEM POSSUIR ARGUMENTOS DIFERNETES PARA FUNCIONAR.
-> O TIPO DE RETORNO DO MÉTODO NÃO É CONSIDERADO PARTE DA ASSINATURA.
-> NÃO PODEMOS TER DOIS MÉTODOS COM O MESMO NOME E TIPOS DE ARGUMENTOS, MAS COM TIPO DE RETORNO DIFERNETE.
# DEFINIÇÃO E UTILIZAÇÃO DE SOBRECARGA DE MÉTODOS:
-> AO CONCEITUAR SOBRECARGA: A POSSIBILIDADE DE CRIAR MAIS DE UM MÉTODO COM O MESMO NOME E ASSINATURA DIFERENTE É CONHECIEDA COMO SOBRECARGA DE MÉTODOS.
-> A DECISÃO SOBRE QUAL MÉTODO SERÁ CHAMADO QUANDO EXISTEM DOIS OU MAIS MÉTODOS SERÁ FEITA PELO COMPILADOR, COM BASE NA ASSINATURA DOS MÉTODOS.
    ## SOBRECARGA VS SOBREPOSIÇÃO DE MÉTODOS ##
    
    CARACTERÍSTICAS                             SOBRECARGA                              SOBREPOSIÇÃO
    ARGUMENTOS                                  DEVEM SER TROCADOS                      NÃO DEVEM SER TROCADOS
    TIPO DE RETORNO                             PODE SER TROCADO                        NÃO PODE SER TROCADO
    TIPO DE ACESSO                              PODE SER TROCADO                        PODE SER TROCADO POR UM MODIFICADOR MENOS RESTRITIVO
    TIPO DE EXCEÇÃO                             PODE SER TROCADO                        PODE SER TROCADO POR UMA EXCEÇÃO MENOS RESTRITIVA
    CLASSE                                      OCORRE EM UMA CLASSE                    OCORRE ENTRE DUAS CLASSES
    HERANÇA                                     NÃO ENVOLVE HERANÇA                     ENVOLVE HERANÇA
    INVOCAÇÃO                                   OCORRE EM TEMPO DE COMPILAÇÃO           OCORRE EM TEMPO DE EXECUÇÃO
    
# ATRIBUTOS E MÉTODOS ESTÁTICOS EM CLASSES
-> AO CRIARMOS INSTÂNCIAS DE UMA CLASSE POR MEIO DA PALAVRA RESERVADA NEW, CADA INSTÂNCIA DA CLASSE TERÁ UMA CÓPIA DE TODOS OS CAMPOS DELCARADOS NA CLASSE.
-> POR PADRÃO, A MODIFICAÇÃO DE UM ACAMPO DE UMA INSTÂNCIA DE UMA CLASSE NÃO AFETA O VALOR DO MESMO CAMPO EM OUTRA INSTÂNCIA.
-> ESSES CAMPOS SÃO CONHECIDOS COMO CAMPOS DE INSTÂNCIA.
-> É POR MIEO DA DECLARAÇÃO E DO USO DE CAMPOS ESTÁTICOS QUE CONSEGUIMOS COMPARTILHAR UM VALOR EM TODAS AS INSTÂNCIAS DE UMA MESMA CLASSE.
-> UM CAMPO ESTÁTICO É TAMBÉM CONHECIDO COMO CAMPO DE CLASSE, JÁ QUE ELE ESTÁ ASSOCIADO À CLASSE EM QUE ELE É DEFINIDO, NÃO À INSTÂNCIA DESSA CLASSE.
-> CAMPO ESTÁTICOS SÃO DECLARADOS COM O MODIFICADOR STATIC, QUE DEVE SER POSICIONADO ANTES DO TIPO DE DADO DO CAMPO E PODE SER COMBINADO COM MODIFICADORES DE ACESSO
(PUBLIC E PRIVATE, POR EXEMPLO). EXEMPLO DE DECLARAÇÃO DE CAMPOS:
    -> private int registroAcademico; (CAMPOS DE INSTÂNCIA).
    -> static private int registroAcademico; (CAMPO ESTÁTICO OU CAMPO DE CLASSE).
    
# ESTRUTURAS DE CONTROLE, TOMADAS DE DECISÃO E LAÇOS DE REPETIÇÃO

# ESTRUTURAS BÁSICAS
-> UTILIZAÇÃO DE ESTRUTURAS BÁSICAS, MAS QUE SÃO DE EXTREMA IMPORTÂNCIA, POIS ROMPEM O FLUXO LINEAR DO CÓDIGO TORNANDO-O MAIS DINÂMICO.
-> A LINGUAGEM JAVA É FORTEMENTE TIPADA, OU SEJA, OS TIPOS DAS VARIÁVEIS SÃO IMPORTANTES PARA A MANIPULAÇÃO DE DADOS E DEVEM SER DECLARADOS NO INÍCIO DE CRIAÇÃO DA VARIÁVEL.
# COMANDO IF E IF-ELSE
-> AS TRÊS FORMAS DE IF-ELSE:
    -> ESSES TRêS COMANDOS ROMPEM COM O FLUXO SEQUENCIAL DO CÓDIGO SE UMA DETERMINADA CONDIÇÃO FOR SATISFEITA.
    -> ASSIM, SE O VALOR FOR VERDADEIRO, O COMANDO IF É EXECUTADO; SE O VALOR FOR FALSO O COMANDO ELSE É EXECUTADO.
    -> O COMANDO IF-ELSE É COMPOSTO DE TOMADAS DE DECISÃO E COMANDOS A SEREME EXECUTADOS; CADA TOMADA DE DECISÃO LEVA A UM COMANDO ESPECÍFICO.
# COMANDO SWITCH E OPERADORES ARITMÉTICOS E RELACIONAIS:
    -> PADRÃO DE OUTRAS LINGUAGENS
# OPERADORES DE ATRIBUIÇÃO, INCREMENTO E LÓGICOS:
    -> PRÉ-INCREMENTO:
        ++X
    -> PÓS-INCREMENTO:
        X++
    -> PRÉ-DECREMENTO:
        --X
    -> PÓS-DECREMENTO:
        X--
*/